{
    "swagger": "2.0",
    "info": {
      "title": "schedule-me-up API",
      "description": "API description for schedule-me-up",
      "version": "1.0.0"
    },
    "basePath": "/api/v1",
    "schemes": [
      "http",
      "https"
    ],
    "securityDefinitions": {
      "Bearer": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "paths": {
      "/example/{id}": {
        "get": {
          "tags": [
            "example"
          ],
          "summary": "Get data based on id",
          "parameters": [
              {
                "name": "id",
                "in": "path",
                "description": "ID",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
          ],
          "description": "Returns data based on its id",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          }
        },
        "post": {
          "tags":[
            "example"
          ],
          "summary": "Add/update data for certain ID",
          "description": "",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "security": [
            {
              "Bearer": []
            }
          ],
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of data that needs to be inserted/updated",
              "required": true,
              "type": "integer",
              "format": "int64"
            },
            {
              "name": "data",
              "in": "formData",
              "description": "Data",
              "required": true,
              "type": "string"
            }
          ],
          "responses": {
            "405": {
              "description": "Invalid input"
            }
          }
        }
      },
      "/auth/signup": {
        "post": {
          "tags":[
            "Authentication"
          ],
          "summary": "Signup a user",
          "description": "",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "email",
              "in": "formData",
              "type":"string",
              "description": "email address",
              "required": true
            },
            {
              "name": "password",
              "type": "string",
              "in": "formData",
              "description": "password"
            },
            {
              "name": "firstName",
              "type": "string",
              "in": "formData",
              "description": "firstName"
            },
            {
              "name": "lastName",
              "type": "string",
              "in": "formData",
              "description": "lastName"
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized"
            }
          }
        }
      },
      "/auth/login": {
        "post": {
          "tags":[
            "Authentication"
          ],
          "summary": "Login as a user",
          "description": "",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "email",
              "in": "formData",
              "type":"string",
              "description": "email address",
              "required": true
            },
            {
              "name": "password",
              "type": "string",
              "in": "formData",
              "description": "password"
            }
          ],
          "responses": {
            "401": {
              "description": "Unauthorized"
            }
          }
        }
      },
      "/groups/": {
        "get": {
          "tags": [
            "Groups"
          ],
          "summary": "Get all groups",
          "description": "Get all groups from userId",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          }
        },
        "post": {
          "tags":[
            "Groups"
          ],
          "summary": "Add a new group",
          "description": "",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "groupName",
              "in": "formData",
              "type":"string",
              "description": "Name of group",
              "required": true
            },
            {
              "name": "groupDesc",
              "type": "string",
              "in": "formData",
              "description": "Description of group"
            },
            {
              "name": "meetingDuration",
              "type": "string",
              "format": "date",
              "in": "formData",
              "description": "Duration of meeting"
            },
            {
              "name": "meetingFrequency",
              "type": "string",
              "in": "formData",
              "description": "Frequency of meetings"
            },
            {
              "name": "meetingLocation",
              "type": "string",
              "in": "formData",
              "description": "Location of meetings"
            }
          ],
          "responses": {
            "201": {
              "description": "Returns the group id of newly created group"
            }
          }
        }
      },
      "/groups/{groupId}": {
        "get": {
          "tags": [
            "Groups"
          ],
          "summary": "Get group information from groupId",
          "parameters": [
              {
                "name": "groupId",
                "in": "path",
                "description": "ID",
                "required": true,
                "type": "integer",
                "format": "int64"
              }
          ],
          "description": "Get group information from groupId",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "OK"
            }
          }
        },
        "delete": {
          "tags":[
            "Groups"
          ],
          "summary": "Delete a group with a certain groupId",
          "description": "",
          "consumes": [
            "application/x-www-form-urlencoded"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "groupId",
              "in": "path",
              "description": "groupId of group to be deleted",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "200": {
              "description": "Group deleted"
            }
          }
        }
      }
    }
  }